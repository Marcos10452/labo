RRS_predict3 = sum(residuos3^2)
RRS_predict3
TempProm.ts.dif.i = ts(TempProm[84:(tiempo.dado.f-12)],frequency=12,start=c(1927,1))
plot(TempProm.ts.dif.i)
TempProm.ts.dif.i = ts(TempProm[84:(tiempo.dado.f-12)],frequency=12,start=c(1928,1))
plot(TempProm.ts.dif.i)
TempProm.ts.dif.f = ts(TempProm[(tiempo.dado.f-12+1):tiempo.dado.f],frequency=12,start=c(1939,1))
plot(TempProm.ts.dif.f)
aux<-t(TempProm.ts.dif.f)
auxaux<-data.frame(t(aux))
auxaux
modelo<- auto.arima(TempProm.ts.dif.i)
ajuste.final <- forecast(modelo, h=12)
plot(ajuste.final)
print(ajuste.final)
aux2<-data.frame(ajuste.final)
aux2[ ,1]
#-----------------PREDICT MODELO 3-----------------------------------
residuos3 = auxaux[,1]-aux2[,1]
RRS_predict3 = sum(residuos3^2)
RRS_predict3
acf(TempProm,  lag.max =240)
TempProm.ts.dif.i = ts(TempProm[120:(tiempo.dado.f-12)],frequency=12,start=c(1930,1))
plot(TempProm.ts.dif.i)
TempProm.ts.dif.f = ts(TempProm[(tiempo.dado.f-12+1):tiempo.dado.f],frequency=12,start=c(1939,1))
plot(TempProm.ts.dif.f)
aux<-t(TempProm.ts.dif.f)
auxaux<-data.frame(t(aux))
auxaux
modelo<- auto.arima(TempProm.ts.dif.i)
ajuste.final <- forecast(modelo, h=12)
plot(ajuste.final)
print(ajuste.final)
aux2<-data.frame(ajuste.final)
aux2[ ,1]
#-----------------PREDICT MODELO 3-----------------------------------
residuos3 = auxaux[,1]-aux2[,1]
RRS_predict3 = sum(residuos3^2)
RRS_predict3
tiempo.dado.f = length(TempProm)
TempProm.ts.dif.i = ts(TempProm[73:(tiempo.dado.f-12)],frequency=12,start=c(1930,1))
plot(TempProm.ts.dif.i)
TempProm.ts.dif.f = ts(TempProm[(tiempo.dado.f-12+1):tiempo.dado.f],frequency=12,start=c(1939,1))
plot(TempProm.ts.dif.f)
aux<-t(TempProm.ts.dif.f)
auxaux<-data.frame(t(aux))
auxaux
modelo<- auto.arima(TempProm.ts.dif.i)
ajuste.final <- forecast(modelo, h=12)
plot(ajuste.final)
print(ajuste.final)
aux2<-data.frame(ajuste.final)
aux2[ ,1]
#-----------------PREDICT MODELO 3-----------------------------------
residuos3 = auxaux[,1]-aux2[,1]
RRS_predict3 = sum(residuos3^2)
RRS_predict3
TempProm
nottem
modelo<-auto.arima(nottem)
summary(modelo)
tiempo.dado.f = length(nottem)
modelo<-auto.arima(nottem)
summary(modelo)
tiempo.dado.f = length(nottem)
modelo<-auto.arima(nottem)
summary(modelo)
elemnts_long = length(nottem)
for( i in seq(1, length(elemnts_long), by=12)){
if(i!=elemnts_long){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1930+(i/12)-1
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):temp_train],frequency=12,start=c(1939,1))
print(temp_train)
}
}
for( i in seq(1, length(elemnts_long), by=12)){
if(i!=elemnts_long){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1930+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):temp_train],frequency=12,start=c(1939,1))
print(temp_train)
}
}
nottem
for( i in seq(1, length(elemnts_long), by=12)){
if(i!=elemnts_long){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):temp_train],frequency=12,start=c(1939,1))
print(temp_train)
}
}
nottem
for( i in seq(1, length(elemnts_long), by=12)){
if(i!=elemnts_long){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):],frequency=12,start=c(1939,1))
print(temp_train)
}
}
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
if(i!=elemnts_long){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
print(temp_train)
}
print(i)
for( i in seq(1, length(elemnts_long), by=12)){
if(i!=elemnts_long){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
print(temp_train)
}
print(i)
}
for(x in seq(1,100,5)) {
print(x)
}
if(i!=elemnts_long){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
print(temp_train)
}
for( i in seq(1, elemnts_long, by=12)){
if(i!=elemnts_long){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
print(temp_train)
}
print(i)
}
for( i in seq(1, elemnts_long, by=12)){
if(i!=elemnts_long-12){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
print(temp_train)
}
print(i)
}
for( i in seq(1, elemnts_long, by=12)){
if(i!=(elemnts_long-12)){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
print(temp_train)
}
print(i)
}
print(temp_validate)
for( i in seq(1, elemnts_long-12, by=12)){
if(i!=(elemnts_long-12)){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
print(temp_train)
}
print(i)
}
print(temp_validate)
nottem
aux<-t(nottem)
auxaux<-data.frame(t(aux))
auxaux
aux<-t(nottem[229:240])
auxaux<-data.frame(t(aux))
auxaux
if(i!=(elemnts_long-12)){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
modelo<- auto.arima(temp_train)
}
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
library(ggplot2)
library(knitr)
library(haven)
library(stats)
library(dplyr)
library(pls)
library(ggfortify)
library(funModeling)
library(ggthemes)
library(ggpmisc)
library(forecast)
#---------------------------------------------------------------------------------------
#
#                              Ejercicio N3
#
#---------------------------------------------------------------------------------------
df=data.frame(nottem)
modelo<-auto.arima(nottem)
summary(modelo)
elemnts_long = length(nottem)
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
temp_validate
temp_validate
aux<-t(temp_validate)
aux
aux<-t(t(temp_validate))
aux
modelo<-auto.arima(nottem)
summary(modelo)
elemnts_long = length(nottem)
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
aux<-t(t(temp_validate))
aux
for( i in seq(1, elemnts_long-12, by=12)){
if(i!=(elemnts_long-12)){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
#model creation
modelo<- auto.arima(temp_train)
}
#forecasting
ajuste.final <- forecast(modelo, h=12)
aux2<-data.frame(ajuste.final)
aux2[ ,1]
residuos3 = aux[,1]-aux2[,1]
RRS_predict3 = sum(residuos3^2)
print(RRS_predict3,i)
}
plot(TempProm.ts.dif.i)
temp_train
#model creation
modelo<- auto.arima(temp_train)
#forecasting
ajuste.final <- forecast(modelo, h=12)
aux2<-data.frame(ajuste.final)
aux2[ ,1]
residuos3 = aux[,1]-aux2[,1]
RRS_predict3 = sum(residuos3^2)
print(RRS_predict3,i)
aux[,1]
residuos3
residuos3^2
RRS_predict3 = sum(residuos3^2)
print(RRS_predict3)
print(i)
lfprint(RRS_predict3)
print(RRS_predict3;i)
print(RRS_predict3,i)
modelo<-auto.arima(nottem)
summary(modelo)
elemnts_long = length(nottem)
# Los ponemos en una variable separada
temp_validate = ts(nottem[(elemnts_long-12+1):elemnts_long],frequency=12,start=c(1939,1))
aux<-t(t(temp_validate))
aux
for( i in seq(1, elemnts_long-12, by=12)){
if(i!=(elemnts_long-12)){
#Tomo los primeros elementos de la serie y dejo los doce siguientes para evaluar
year=1920+((i-1)/12)
temp_train = ts(nottem[i:(elemnts_long-12)],frequency=12,start=c(year,1))
#model creation
modelo<- auto.arima(temp_train)
}
#forecasting
ajuste.final <- forecast(modelo, h=12)
aux2<-data.frame(ajuste.final)
aux2[ ,1]
residuos3 = aux[,1]-aux2[,1]
RRS_predict3 = sum(residuos3^2)
print(RRS_predict3)
print(i)
}
temp_train = ts(nottem[73:(elemnts_long-12)],frequency=12,start=c(1926,1))
plot(temp_train)
plot(temp_validate)
modelo<- auto.arima(temp_train)
ajuste.final <- forecast(modelo, h=12)
plot(ajuste.final)
print(ajuste.final)
finalplot<-cbind(data.frame(aux)[,1],ajuste.final)
data.frame(aux)[,1],
plot(ajuste.final)
data.frame(aux)[,1]
aux2<-data.frame(ajuste.final)
residuos3 = aux[,1]-aux2[,1]
finalplot<-cbind(data.frame(aux)[,1],ajuste.final[,1],ajuste.final[,2:12])
ajuste.final <- forecast(modelo, h=12)
aux2<-data.frame(ajuste.final)
residuos3 = aux[,1]-aux2[,1]
finalplot<-cbind(data.frame(aux)[,1],aux2[,1],residuos3,aux2[,2:12])
aux2[,2:12]
aux2[,1:12]
aux2
aux2[,1]
aux2[,1:2]
aux2[,2:4]
finalplot<-cbind(data.frame(aux)[,1],aux2[,1],residuos3,aux2[,2:5])
finalplot
print(finalplot)
plot(finalplot)
finalplot<-cbind(data.frame(aux)[,1],aux2[,1],residuos3,aux2[,2:5])
ajuste.final <- forecast(modelo, h=12)
print(ajuste.final)
print(ajuste.final)
plot(ajuste.final)
print(ajuste.final)
#---Extract the Data for ggplot using funggcast()
pd<-funggcast(modelo,ajuste.final)
library(scales)
#---Extract the Data for ggplot using funggcast()
pd<-funggcast(modelo,ajuste.final)
#---Plot in ggplot2 0.9
library(ggplot2)
#---Extract the Data for ggplot using funggcast()
pd<-funggcast(modelo,ajuste.final)
#---Extract the Data for ggplot using funggcast()
pd<-funggcast(modelo,ajuste.final)
library(forecast)
#---Extract the Data for ggplot using funggcast()
pd<-funggcast(modelo,ajuste.final)
modelo
modelo$coef
temp_train
ajuste.final$series
ajuste.final$lower
ajuste.final$residuals
ajuste.final$fitted
ajuste.final$x
p1a<-ggplot(data=ajuste.final,aes(x=date,y=observed))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
p1a<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
ajuste.final
p1a<-ggplot(data=ajuste.final,aes(x=rowname(ajuste.final),y="Point Forecast"))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
p1a<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
p1a<-ggplot(data=ajuste.final,aes(x=rname(ajuste.final),y="Point Forecast"))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
p1a<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
ajuste.final
p1a<-ggplot(data=ajuste.final,aes(x=row.names(ajuste.final),y="Point Forecast"))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
p1a<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
library(scales)
ajuste.final
p1a<-ggplot(data=ajuste.final,aes(x=row.names(ajuste.final),y="Point Forecast"))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
p1a<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
p1a<-ggplot(data=ajuste.final,aes(x=row.names(ajuste.final),y="Point Forecast"))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
#<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
p1a<-ggplot(data=ajuste.final,aes(x=row.names(ajuste.final),y=Point.Forecast))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
#<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
p1a<-ggplot(data=ajuste.final,aes(x=row.names(ajuste.final),y=ajuste.final$fitted))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
#<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
ajuste.final$series
ajuste.final$lower
ajuste.final$x
p1a<-ggplot(data=ajuste.final,aes(x=row.names(ajuste.final),y=PointForecast))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
#<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
p1a<-ggplot(data=ajuste.final,aes(x=row.names(ajuste.final),y=Point_Forecast))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
#<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
ajuste.final$x
p1a<-ggplot(data=ajuste.final,aes(x=row.names(ajuste.final),y=Point Forecast))
p1a<-p1a+geom_line(col='red')
p1a<-p1a+geom_line(aes(y=fitted),col='blue')
p1a<-p1a+geom_line(aes(y=forecast))+geom_ribbon(aes(ymin=lo95,ymax=hi95),alpha=.25)
p1a<-p1a+scale_x_date(name='',breaks='1 year',minor_breaks='1 month',labels=date_format("%b-%y"),expand=c(0,0))
p1a<-p1a+scale_y_continuous(name='Units of Y')
#<-p1a+opts(axis.text.x=theme_text(size=10),title='Arima Fit to Simulated Data\n (black=forecast, blue=fitted, red=data, shadow=95% conf. interval)')
p1a
ajuste.final$x
is.prime <- function(num) {
if (num == 2) {
TRUE
} else if (any(num %% 2:(num-1) == 0)) {
FALSE
} else {
TRUE
}
}
fila <- 0;
desde <- 3
hasta <- 10
for (fila in desde:hasta)
{
if (is.prime(fila)){print(fila)}
}
fila <- 0;
desde <- 333000
hasta <- 333999
for (fila in desde:hasta)
{
if (is.prime(fila)){print(fila)}
}
desde <- 757000
hasta <- 757999
for (fila in desde:hasta)
{
if (is.prime(fila)){print(fila)}
}
desde <- 101000
hasta <- 101200
for (fila in desde:hasta)
{
if (is.prime(fila)){print(fila)}
}
desde <- 531100
hasta <- 531200
for (fila in desde:hasta)
{
if (is.prime(fila)){print(fila)}
}
source("~/DataScience/Curso/MdD/labo/src/lightgbm/z512_lightgbm_20220918_v4_test.r")
source("~/DataScience/Curso/MdD/labo/src/lightgbm/z512_lightgbm_20220918_v4_test.r")
source("~/DataScience/Curso/MdD/labo/src/cutpoint.R")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v3.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v3.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v3.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v3.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v3.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v3.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v3.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v3.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v4.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v4.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v4.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v4.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v4.r")
source("~/DataScience/Curso/MdD/Experimento_Undersampling/Scripts/Ganancia en base el z634_v4.r")
source("~/DataScience/Curso/MdD/labo/Experimento_Undersampling/Scripts/Ganancia_en_base_z634_v4.3.r")
source("~/DataScience/Curso/MdD/labo/Experimento_Undersampling/Scripts/Ganancia_en_base_z634_v4.3.r")
